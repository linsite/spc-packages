#!/usr/bin/env php
<?php

// Main entrypoint for SPC Packages
// Uses Symfony Console for command-line parsing

// Define constants
define('BASE_PATH', dirname(__DIR__));
const INI_PATH = BASE_PATH . '/src/ini';
const DIST_PATH = BASE_PATH . '/dist';
const DIST_RPM_PATH = DIST_PATH . '/rpm';
const DIST_DEB_PATH = DIST_PATH . '/deb';
define('TEMP_DIR', sys_get_temp_dir() . '/spc-packages');


// Ensure autoloading is set up
require_once BASE_PATH . '/vendor/autoload.php';

use Symfony\Component\Console\Application;
use staticphp\Command\BuildCommand;
use staticphp\Command\PackageCommand;
use staticphp\Command\AllCommand;

// Create a new Symfony Console Application
$application = new Application('SPC Packages', '1.0.0');

// Register commands
$application->add(new BuildCommand());
$application->add(new PackageCommand());
$application->add(new AllCommand());

// Set default command to list commands when no command is specified
$application->setDefaultCommand('list');

// Debug the command arguments
$commandArgs = array_slice($_SERVER['argv'], 1);
echo "Command arguments: " . implode(' ', $commandArgs) . "\n";
if (count($commandArgs) > 0) {
    echo "Command name: " . $commandArgs[0] . "\n";
} else {
    echo "Command name: none\n";
}

// Run the application with error handling
try {
    echo "About to run application...\n";
    $exitCode = $application->run();
    echo "Application run completed with exit code: " . $exitCode . "\n";
} catch (Exception $e) {
    echo "Error running application: " . $e->getMessage() . "\n";
    echo "Stack trace: " . $e->getTraceAsString() . "\n";
}
